## The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
## Number = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
def problem8Name() : 
	return "Problem 8"

def problem8Description() :
	return "Calculate the greatest product of 4 adjacent numbers in a 1,000 digit number"

def problem8Params() : 
	return ""

def bruteForce(number, adjDigits) : 
	highestProduct = 0
	
	numberArray = list(map(int,str(number)))
	for i in range(0, len(numberArray) - adjDigits):
		product = 1
		for k in range(i, i+adjDigits) : 
			if(numberArray[k] == 0) :
				break
			else : 
				product = product * int(numberArray[k])
		#productOfFour = int(numberArray[i]) * numberArray[i+1] * numberArray[i+2] * numberArray[i+3]
		if product > highestProduct :
			highestProduct = product
	return highestProduct

def problem8() : 
	number = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
	adjDigits = 13
	## Lets be a little smart about this. 
	## Brute force would be to set up as an array, and iterate through 0:4, 1:5, 2:6 etc... 
	## 
	answer = bruteForce(number, adjDigits)
	return answer


## for testing
#answer = problem8(number) 
#print(answer)